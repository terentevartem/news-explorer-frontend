// Header. Класс, отвечающий за логику работы шапки сайта. Его конструктор принимает объект опций. В опциях передайте цвет шапки, так как на разных страницах он может быть разный. Методы у класса Header такие:
// render при вызове перерисовывает шапку в зависимости от переданного аргумента — объекта props. У этого объекта есть два обязательных свойства:
// isLoggedIn — залогинен ли пользователь;
// userName — имя, которое отображается в шапке залогиненного пользователя.
// Popup. Класс попапа. Вот его методы:
// setContent — вставляет в попап содержимое, например, форму входа или сообщение об успешной регистрации;
// clearContent — очищает содержимое попапа;
// open — открывает попап;
// close — закрывает попап.
// Form. Класс, отвечающий за логику работы формы. Методы:
// setServerError — добавляет форме ошибку, пришедшую с сервера;
// _validateInputElement — валидирует переданный в качестве аргумента инпут;
// _validateForm — валидирует всю форму;
// _clear — вспомогательный метод, очищает поля формы;
// _getInfo — вспомогательный метод, возвращает данные формы.
// NewsCard. Класс карточки новости. Методы:
// renderIcon — отвечает за отрисовку иконки карточки. У этой иконки три состояния: иконка незалогиненного пользователя, активная иконка залогиненного, неактивная иконка залогиненного.
// NewsCardList. Класс списка карточек новостей. Конструктор принимает массив карточек, которые должны быть в списке при первой отрисовке. Методы:
// renderResults принимает массив экземпляров карточек и отрисовывает их;
// renderLoader отвечает за отрисовку лоудера;
// renderError принимает объект ошибки и показывает ошибку в интерфейсе;
// showMore отвечает за функциональность кнопки «Показать ещё»;
// addCard принимает экземпляр карточки и добавляет её в список.
// Здесь перечислено большинство методов, необходимых классам, но не все.
// Во-первых, если часть интерфейса, которой управляет класс, подразумевает интерактивность, конструктор этого класса может принимать массив обработчиков событий, которые нужно добавить его элементам. Обработчики следует передавать конструктору в виде массива, а за их добавление должен отвечать приватный метод _setHandlers.
// Во-вторых, каждый из классов взаимодействуют с разметкой и нужно каким-то образом обеспечить к ней доступ. Хранить разметку можно двумя способами:
// в шаблонной строке;
// в template-теге, если знаете, что это такое или хотите разобраться.
// Держать разметку можно где-то внутри класса, подумайте самостоятельно, как это лучше реализовать.

